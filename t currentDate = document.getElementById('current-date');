[33mcommit 5addd72a946c2e921c3071f2d53e50888cb505d3[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: Winterdarth <kajdarov.d@gmail.com>
Date:   Mon Feb 10 18:45:16 2025 +0100

    version 1.0.2

[1mdiff --git a/src/main/java/hu/kajdasoft/suri/controller/InjectionScheduleController.java b/src/main/java/hu/kajdasoft/suri/controller/InjectionScheduleController.java[m
[1mindex 6fbf75f..d9d38df 100644[m
[1m--- a/src/main/java/hu/kajdasoft/suri/controller/InjectionScheduleController.java[m
[1m+++ b/src/main/java/hu/kajdasoft/suri/controller/InjectionScheduleController.java[m
[36m@@ -7,6 +7,7 @@[m [mimport org.springframework.http.HttpStatus;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.web.bind.annotation.*;[m
 [m
[32m+[m[32mimport java.time.LocalDate;[m
 import java.util.List;[m
 @RestController[m
 @RequestMapping("/api/schedules")[m
[36m@@ -15,12 +16,20 @@[m [mpublic class InjectionScheduleController {[m
     private InjectionScheduleService scheduleService;[m
 [m
     @GetMapping[m
[31m-    public ResponseEntity<List<InjectionSchedule>> getCurrentInjection() {[m
[32m+[m[32m    public ResponseEntity<List<InjectionSchedule>> getAllSchedules() {[m
         List<InjectionSchedule> schedules = scheduleService.getAllSchedules();[m
         System.out.println("Recevied schedules: " + schedules);[m
         return new ResponseEntity<>(schedules, HttpStatus.OK);[m
     }[m
 [m
[32m+[m[32m    @GetMapping("/current")[m
[32m+[m[32m    public ResponseEntity<InjectionSchedule> getCurrentInjection() {[m
[32m+[m[32m        LocalDate today = LocalDate.now();[m
[32m+[m[32m        InjectionSchedule currentInjection = scheduleService.findByInjectionDate(today);[m
[32m+[m[32m        return new ResponseEntity<>(currentInjection, HttpStatus.OK);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
     @PutMapping("/{scheduleId}/complete")[m
     public ResponseEntity<Void> markScheduleAsCompleted(@PathVariable Long scheduleId) {[m
         scheduleService.markInjectionAsCompleted(scheduleId);[m
[1mdiff --git a/src/main/java/hu/kajdasoft/suri/service/InjectionScheduleService.java b/src/main/java/hu/kajdasoft/suri/service/InjectionScheduleService.java[m
[1mindex 0bde7b3..01a0a4b 100644[m
[1m--- a/src/main/java/hu/kajdasoft/suri/service/InjectionScheduleService.java[m
[1m+++ b/src/main/java/hu/kajdasoft/suri/service/InjectionScheduleService.java[m
[36m@@ -21,6 +21,10 @@[m [mpublic class InjectionScheduleService {[m
         return scheduleRepository.findAll();[m
     }[m
 [m
[32m+[m[32m    public InjectionSchedule findByInjectionDate(LocalDate injectionDate) {[m
[32m+[m[32m        return scheduleRepository.findByInjectionDate(injectionDate);[m
[32m+[m[32m    }[m
[32m+[m
     public BodyPart getNextBodyPart(int index) {[m
         return BodyPart.getNextBodyPart(index);[m
     }[m
[1mdiff --git a/src/main/resources/static/js/app.js b/src/main/resources/static/js/app.js[m
[1mindex 41d0884..b4c7f53 100644[m
[1m--- a/src/main/resources/static/js/app.js[m
[1m+++ b/src/main/resources/static/js/app.js[m
[36m@@ -3,6 +3,8 @@[m [mdocument.addEventListener('DOMContentLoaded', async function() {[m
     const currentBodyPart = document.getElementById('current-body-part');[m
     const nextDate = document.getElementById('next-date');[m
     const nextBodyPart = document.getElementById('next-body-part');[m
[32m+[m[32m    const markDoneBtn = document.getElementById('mark-done-btn');[m
[32m+[m
     function formatBodyPart(bodyPart) {[m
         return bodyPart[m
             .replace(/_/g, ' ')[m
[36m@@ -10,76 +12,73 @@[m [mdocument.addEventListener('DOMContentLoaded', async function() {[m
             .replace(/\b\w/g, (char) => char.toUpperCase());[m
     }[m
 [m
[31m-    async function fetchInjectionSchedule() {[m
[32m+[m[32m    async function fetchCurrentInjection() {[m
         try {[m
[31m-            const response = await fetch('/api/schedules');[m
[32m+[m[32m            const response = await fetch('/api/schedules/current');[m
             if (!response.ok) {[m
[31m-                throw new Error('Failed to fetch injection schedule data');[m
[32m+[m[32m                throw new Error('Failed to fetch current injection');[m
             }[m
[31m-            const data = await response.json();[m
[31m-[m
[31m-            return data.map(item => ({[m
[31m-                ...item,[m
[31m-                bodyPart: formatBodyPart(item.bodyPart)[m
[31m-            }));[m
[32m+[m[32m            return await response.json();[m
         } catch (error) {[m
[31m-            console.error('Error fetching injection schedule data:', error);[m
[31m-            return [];[m
[32m+[m[32m            console.error('Error fetching current injection:', error);[m
[32m+[m[32m            return null;[m
         }[m
     }[m
 [m
[31m-    function renderSchedule(scheduleData) {[m
[31m-        if (scheduleData.length >= 2) {[m
[31m-            currentDate.textContent = scheduleData[0].injectionDate;[m
[31m-            currentBodyPart.textContent = scheduleData[0].bodyPart;[m
[31m-            nextDate.textContent = scheduleData[1].injectionDate;[m
[31m-            nextBodyPart.textContent = scheduleData[1].bodyPart;[m
[31m-        } else if (scheduleData.length === 1) {[m
[31m-            const injection = scheduleData[0];[m
[31m-            currentDate.textContent = injection.injectionDate;[m
[31m-            currentBodyPart.textContent = injection.bodyPart;[m
[31m-            nextDate.textContent = injection.injectionDate;[m
[31m-            nextBodyPart.textContent = injection.bodyPart;[m
[31m-        } else {[m
[31m-            console.error('No injection schedule data found');[m
[32m+[m[32m    async function fetchNextInjection() {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const response = await fetch('/api/schedules');[m
[32m+[m[32m            if (!response.ok) {[m
[32m+[m[32m                throw new Error('Failed to fetch next injection');[m
[32m+[m[32m            }[m
[32m+[m[32m            const schedules = await response.json();[m
[32m+[m[32m            const today = new Date().toISOString().split('T')[0];[m
[32m+[m[32m            return schedules.find(schedule => schedule.injectionDate > today);[m
[32m+[m[32m        } catch (error) {[m
[32m+[m[32m            console.error('Error fetching next injection:', error);[m
[32m+[m[32m            return null;[m
         }[m
     }[m
 [m
[31m-    async function markDone() {[m
[31m-        try {[m
[31m-            const scheduleData = await fetchInjectionSchedule();[m
[31m-            if (scheduleData.length === 0) {[m
[31m-                console.error('No injection schedule data found');[m
[31m-                return;[m
[31m-            }[m
[31m-            const currentScheduleId = scheduleData[0].id;[m
[31m-            const response = await fetch(`/api/schedules/${currentScheduleId}/complete`, {[m
[31m-                method: 'PUT',[m
[31m-                headers: {[m
[31m-                    'Content-Type': 'application/json'[m
[31m-                },[m
[31m-                body: JSON.stringify({ id: currentScheduleId })[m
[31m-            });[m
[31m-            if (!response.ok) {[m
[31m-                throw new Error('Failed to mark injection as done');[m
[32m+[m[32m    function renderSchedule(currentInjection, nextInjection) {[m
[32m+[m[32m        if (currentInjection) {[m
[32m+[m[32m            currentDate.textContent = currentInjection.injectionDate;[m
[32m+[m[32m            currentBodyPart.textContent = formatBodyPart(currentInjection.bodyPart);[m
[32m+[m
[32m+[m[32m            if (currentInjection.injectionCompleted) {[m
[32m+[m[32m                markDoneBtn.disabled = true;[m
[32m+[m[32m                markDoneBtn.textContent = 'MÃ¡r Beadva';[m
[32m+[m[32m            } else {[m
[32m+[m[32m                markDoneBtn.disabled = false;[m
[32m+[m[32m                markDoneBtn.textContent = 'Beadva';[m
             }[m
[31m-            await renderSchedule(scheduleData);[m
[31m-            // Disable the button and visually indicate it has been used[m
[32m+[m[32m        } else {[m
[32m+[m[32m            currentDate.textContent = 'N/A';[m
[32m+[m[32m            currentBodyPart.textContent = 'N/A';[m
             markDoneBtn.disabled = true;[m
[31m-            markDoneBtn.textContent = 'MÃ¡r Beadva';[m
[31m-            markDoneBtn.classList.add('used');[m
[31m-        } catch (error) {[m
[31m-            console.error('Error marking injection as done:', error);[m
[32m+[m[32m            markDoneBtn.textContent = 'Nincs beadÃ¡s';[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if (nextInjection) {[m
[32m+[m[32m            nextDate.textContent = nextInjection.injectionDate;[m
[32m+[m[32m            nextBodyPart.textContent = formatBodyPart(nextInjection.bodyPart);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            nextDate.textContent = 'N/A';[m
[32m+[m[32m            nextBodyPart.textContent = 'N/A';[m
         }[m
     }[m
 [m
[31m-    const markDoneBtn = document.getElementById('mark-done-btn');[m
[32m+[m[32m    const currentInjection = await fetchCurrentInjection();[m
[32m+[m[32m    const nextInjection = await fetchNextInjection();[m
[32m+[m[32m    renderSchedule(currentInjection, nextInjection);[m
[32m+[m
     if (markDoneBtn) {[m
[31m-        markDoneBtn.addEventListener('click', markDone);[m
[31m-    } else {[m
[31m-        console.error('mark-done-btn not found');[m
[32m+[m[32m        markDoneBtn.addEventListener('click', async () => {[m
[32m+[m[32m            if (currentInjection) {[m
[32m+[m[32m                await markInjectionAsCompleted(currentInjection.id);[m
[32m+[m[32m                markDoneBtn.disabled = true;[m
[32m+[m[32m                markDoneBtn.textContent = 'MÃ¡r Beadva';[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
     }[m
[31m-[m
[31m-    const scheduleData = await fetchInjectionSchedule();[m
[31m-    renderSchedule(scheduleData);[m
[31m-});[m
[32m+[m[32m});[m
\ No newline at end of file[m
